//A lex program which adds line numbers to the given file and displays the same onto the standard output

%{
/*
*/
int lineno=1;
%}
line .*\n
%%
{line} { printf("%5d %s",lineno++,yytext); }
%%
main()
{
yylex();
return 0;
}

run---

lex ex1.lex (creates lex.yy.c)
gcc ­o ex1 lex.yy.c ­lfl

To use the program.
./ex1 < filename
This displays the content of the file “filename” along
with line numbers.
This “ex1” program takes standard input also. Try at the
command prompt.

###################################################################

This is also a lex specification program which adds line
numbers to the given file and displays the same onto
standard output Only difference is that main() is not
included unlike previous example. However,
automatically, main() is added by the lex.

%{
/*

*/

int lineno=1;
%}
line .*\n
%%
{line} { printf("%5d %s",lineno++,yytext); }
%%

######################################################################

This is a lex specification program which adds line
numbers to the given file and displays the same onto
standard output. However, it explains about the use of
external variable yyin. The resultant program takes
filename to be tokenized as command line argument unlike
previous programs ex0, ex1 and ex2.
%{
/*
*/
int lineno=1;
%}
line .*\n
%%
{line} { printf("%5d %s",lineno++,yytext); }

%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
return 0;
}

######################################################################

This specification program is an attempt to emulate od
command.

%{

%}
character .
newline \n
%%
{character} { printf("%o ",yytext[0]); }
{newline} { printf("%o ", '\n');}
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
printf("\n");
return 0;
}


########################################################################

This program is an attempt to extract only comments from
a C program and display the same on standard output

%{
%}
comment \/\*.*\*\/
%%
{comment} ECHO;
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
printf("\n");
return 0;
}


#########################################################################

This lex specification program is an attempt to replace
all nonnull sequences of white spaces by a single blank
character. Here, pattern ‘ws” is specified as a series
of spaces of tab characters and action is specified as
return or print a single space. Any other string is
returned as it is.


%{
%}
ws [ \t]

%%
{ws}+ {printf(" "); }
. {printf("%s",yytext);}
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
printf("\n");
return 0;
}

########################################################################

This specification program replaces all the occurrences
of "rama" with "RAMA" and "sita" with "SITA". This
example is used from explain that we can use a string as
a direct pattern in the specification file.


%{
%}
%%
"rama" {printf("RAMA");}
"sita" {printf("SITA"); }
%%
main(int argc, char*argv[])
{
extern FILE *yyin;

yyin=fopen(argv[1],"r");
yylex();
printf("\n");
return 0;
}

#######################################################################

This lex specification program is used to count all
occurrences of "rama" and "sita" in a given file.
%{
int count=0;
%}

%%
"rama" {count++;}
"sita" {count++; }
. ;
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
printf("No of Occurrences=%d\n",count);
return 0;
}

lex ex9.lex
gcc –o ex9 lex.yy.c –lfl
./ex9 filename

######################################################################

This lex specification program is used from generate a C
program which removes all the occurences of “sita” and
“rama” in the given file.
%{
%}
%%
"rama"
"sita"
. ECHO;
%%

Let the above specification file be “ex9a.lex”. Run the following commands.
lex ex9a.lex
gcc –o ex9a lex.yy.c –lfl
./ex9a< filename

########################################################################

This lex specification program is used to count and print the number of pages, lines,
words and characters in a given file.
%{
int lines=0,words=0,characters=0,pages=0;

%}
%START InWord
NewLine [\n]
WhiteSpace [\t ]
NewPage [\f]

%%
{NewPage} {BEGIN 0; characters++;pages++;}
{NewLine} {BEGIN 0; characters++;lines++;}
{WhiteSpace} {BEGIN 0; characters++;}
<InWord>. characters++;
. {BEGIN InWord; characters++; words++;}
%%
int main()
{
yylex();
printf("%d %d %d %d\n",lines,words,characters,pages);
}

Let the above specification file be “ex10.lex”. Run the following commands.
lex ex10.lex
gcc –o ex10 lex.yy.c –lfl
./ex10 filename

#####################################################################################

This lex specification program also can be used from find no of lines, words and
characters in a given file. Here, yyleng indicates the length of the string yytext.
%{
int lines=0,words=0,characters=0;

%}
word [^ \t\n]+
eol \n
%%
{word} {words++;characters+=yyleng;}
{eol} {characters++;lines++;}
. { characters++; }
%%
int main()
{
yylex();
printf("%d %d %d \n",lines,words,characters);
}

Let the above specification file be “ex11.lex”. Run the following commands.
lex ex11.lex
gcc –o ex11 lex.yy.c –lfl
./ex11 filename

#####################################################################################

This lex specification program is to replace all the
occurences of the word "username" with users login name.
%{
%}
%%
username printf("%s",getlogin() );
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
printf("\n");
return 0;
}

Let the above specification file be “ex12.lex”. Run the following commands.
lex ex12.lex
gcc –o ex12 lex.yy.c –lfl
./ex12 filename

#######################################################################################

This lex specification program is to extract all html
tags in the given file.
%{
%}
%%
"<"[^>]*> {printf("%s\n", yytext); }
. ;
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
printf("\n");
return 0;
}

Let the above specification file be “ex13.lex”. Run the following commands.
lex ex13.lex
gcc –o ex13 lex.yy.c –lfl
./ex13 filename.html

########################################################################################

Remove all HTML tags

%{
%}

%%
# Match an HTML tag (from opening '<' to closing '>')
"<"[^>]*> { /* Do nothing to remove the HTML tag */ }

# Match any single character (other than a newline) and print it
[^<>] { printf("%s", yytext); }

# Match newlines and print them to keep the original line structure
\n { printf("\n"); }

. ;

%%

main(int argc, char *argv[]) {
    extern FILE *yyin;
    if (argc < 2) {
        fprintf(stderr, "Usage: %s filename\n", argv[0]);
        return 1;
    }
    yyin = fopen(argv[1], "r");
    if (yyin == NULL) {
        perror("Error opening file");
        return 1;
    }
    yylex();
    printf("\n");
    fclose(yyin);
    return 0;
}



#######################################################################################

Valid Email or not:

%{
#include <stdio.h>
%}

%%
# Define a pattern that matches a valid email ID
# A valid email ID consists of a local part followed by '@' and a domain part.
# Local part: allows alphanumeric characters, underscores, and dots.
# Domain part: consists of alphanumeric characters and dots.

^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ {
    printf("Valid E-mail ID\n");
}

# If it doesn't match the email ID pattern, print an error message
. {
    printf("Invalid E-mail ID\n");
}

%%

int main(int argc, char* argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <email>\n", argv[0]);
        return 1;
    }
    
    char* email = argv[1];
    
    // Create a buffer for the input email
    YY_BUFFER_STATE buffer = yy_scan_string(email);
    
    // Process the input email using yylex
    yylex();
    
    // Destroy the buffer after processing
    yy_delete_buffer(buffer);
    
    return 0;
}


###############################################################################

Valid IP/not

%{
#include <stdio.h>
#include <stdlib.h>

void check_ip_class(char *ip);
%}

%%

# Define a pattern that matches a valid IP address
# An IP address is represented in dot-decimal notation (four groups of numbers separated by dots)
# Each group (octet) should be a number from 0 to 255.

# Pattern for valid IP address
^([0-9]{1,3}\.){3}[0-9]{1,3}$ {
    // Extract the matched IP address from yytext
    char *ip = yytext;

    // Validate each octet in the IP address
    char *token = strtok(ip, ".");
    int valid = 1;
    int octets[4];
    int count = 0;

    while (token && valid) {
        int octet = atoi(token);
        if (octet < 0 || octet > 255) {
            valid = 0;  // Invalid octet
        }
        octets[count++] = octet;
        token = strtok(NULL, ".");
    }

    // Check if there are exactly 4 octets
    if (count != 4) {
        valid = 0;
    }

    // Print the IP address and its class if valid
    if (valid) {
        printf("Valid IP address: %s\n", yytext);
        check_ip_class(yytext);
    } else {
        printf("Invalid IP address: %s\n", yytext);
    }
}

# If it doesn't match a valid IP address, ignore it
. ;

%%

void check_ip_class(char *ip) {
    int octet1;
    sscanf(ip, "%d", &octet1);

    // Determine the class of the IP address
    if (octet1 >= 0 && octet1 <= 127) {
        printf("Class A IP address\n");
    } else if (octet1 >= 128 && octet1 <= 191) {
        printf("Class B IP address\n");
    } else if (octet1 >= 192 && octet1 <= 223) {
        printf("Class C IP address\n");
    } else if (octet1 >= 224 && octet1 <= 239) {
        printf("Class D IP address (multicast)\n");
    } else if (octet1 >= 240 && octet1 <= 255) {
        printf("Class E IP address (reserved)\n");
    } else {
        printf("Unknown IP address class\n");
    }
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <ip_address>\n", argv[0]);
        return 1;
    }
    
    char* ip_address = argv[1];
    
    // Create a buffer for the input IP address
    YY_BUFFER_STATE buffer = yy_scan_string(ip_address);
    
    // Process the input IP address using yylex
    yylex();
    
    // Destroy the buffer after processing
    yy_delete_buffer(buffer);
    
    return 0;
}


####################################################################################3

Valid MAC / not.

%{
#include <stdio.h>
#include <string.h>

// Function to print the OUI (manufacturer prefix) of a MAC address
void print_oui(const char *mac);
%}

%%
# Define a pattern that matches a valid MAC address
# A valid MAC address consists of six groups of two hexadecimal digits separated by hyphens or colons.
# This pattern allows for MAC addresses in formats like "DE-56-0A-DC-E6-88" or "DE:56:0A:DC:E6:88".

^[0-9A-Fa-f]{2}[:-][0-9A-Fa-f]{2}[:-][0-9A-Fa-f]{2}[:-][0-9A-Fa-f]{2}[:-][0-9A-Fa-f]{2}[:-][0-9A-Fa-f]{2}$ {
    printf("Valid MAC address: %s\n", yytext);
    print_oui(yytext);
}

# If it doesn't match a valid MAC address, ignore it
. {
    printf("Invalid MAC address\n");
}

%%

void print_oui(const char *mac) {
    // Extract the first 3 groups (OUI) from the MAC address
    char oui[9]; // OUI consists of the first 6 characters
    strncpy(oui, mac, 8);
    oui[8] = '\0';
    
    // Replace hyphens/colons in the OUI with dashes (for consistency)
    for (int i = 0; i < 8; i++) {
        if (oui[i] == ':' || oui[i] == '-') {
            oui[i] = '-';
        }
    }
    
    printf("Manufacturer OUI: %s\n", oui);
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <mac_address>\n", argv[0]);
        return 1;
    }
    
    char* mac_address = argv[1];
    
    // Create a buffer for the input MAC address
    YY_BUFFER_STATE buffer = yy_scan_string(mac_address);
    
    // Process the input MAC address using yylex
    yylex();
    
    // Destroy the buffer after processing
    yy_delete_buffer(buffer);
    
    return 0;
}

###################################################################################

Count no of integers and floating point


%{
#include <stdio.h>

int integer_count = 0; // Count of integers
int float_count = 0;   // Count of floating-point numbers
%}

%%
# Rule to match integer numbers
# An integer is a sequence of one or more digits, possibly preceded by a negative sign
-?[0-9]+ {
    integer_count++;
}

# Rule to match floating-point numbers
# A floating-point number is a sequence of digits, a decimal point, and a sequence of digits
-?[0-9]*\.[0-9]+ {
    float_count++;
}

# Match any other character or string of characters, ignore them
. ;

%%

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    
    FILE *file = fopen(argv[1], "r");
    if (!file) {
        perror("Error opening file");
        return 1;
    }
    
    yyin = file; // Set input file stream
    
    // Process the input file using yylex
    yylex();
    
    // Close the file
    fclose(file);
    
    // Print the counts of integers and floating-point numbers
    printf("Number of integers: %d\n", integer_count);
    printf("Number of floating-point numbers: %d\n", float_count);
    
    return 0;
}

##############################################################################

Write Lex grammar rules to recognize numbers as defined in C: For example, 1234,
1234L, 1234U, 1234UL, 123.4, 1234E-1, 12.34E+1, 123F, 123.4L, 12E+2F, 12E-2L,
0X1ABC, 0X1ABCU, 0X1ABCL, 0X1ABCUL 


%{
#include <stdio.h>
%}

%%
# Define rules to recognize numbers as defined in C

# Integer literals
# Regular integers
[0-9]+ {
    printf("Integer literal: %s\n", yytext);
}

# Integers with suffixes (L, U)
[0-9]+[UuLl]{1,2} {
    printf("Integer literal with suffix: %s\n", yytext);
}

# Hexadecimal integers
0[xX][0-9a-fA-F]+ {
    printf("Hexadecimal integer literal: %s\n", yytext);
}

# Hexadecimal integers with suffixes
0[xX][0-9a-fA-F]+[UuLl]{1,2} {
    printf("Hexadecimal integer literal with suffix: %s\n", yytext);
}

# Floating-point literals
# Decimal floating-point numbers
[0-9]*\.[0-9]+ {
    printf("Floating-point literal: %s\n", yytext);
}

# Exponential notation (decimal base)
[0-9]+(\.[0-9]*)?[eE][-+]?[0-9]+ {
    printf("Floating-point literal in exponential notation: %s\n", yytext);
}

# Floating-point literals with suffix (F)
[0-9]*\.[0-9]+[Ff] {
    printf("Floating-point literal with suffix: %s\n", yytext);
}

# Hexadecimal floating-point literals
0[xX][0-9a-fA-F]+[pP][-+]?[0-9]+ {
    printf("Hexadecimal floating-point literal: %s\n", yytext);
}

# Hexadecimal floating-point literals with suffixes
0[xX][0-9a-fA-F]+[pP][-+]?[0-9]+[FfLl] {
    printf("Hexadecimal floating-point literal with suffix: %s\n", yytext);
}

# Any other pattern (catch-all rule)
. {
    // Ignore unrecognized input
}

%%

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    
    FILE *file = fopen(argv[1], "r");
    if (!file) {
        perror("Error opening file");
        return 1;
    }
    
    yyin = file; // Set input file stream
    
    // Process the input file using yylex
    yylex();
    
    // Close the file
    fclose(file);
    
    return 0;
}

##############################################################################
 
Recognize identifiers and keywords for C


%{
#include <stdio.h>
#include <string.h>

// List of C keywords
const char* keywords[] = {
    "auto", "break", "case", "char", "const", "continue",
    "default", "do", "double", "else", "enum", "extern",
    "float", "for", "goto", "if", "int", "long",
    "register", "return", "short", "signed", "sizeof",
    "static", "struct", "switch", "typedef", "union",
    "unsigned", "void", "volatile", "while",
    NULL // End of list
};

// Function to check if a string is a keyword
int is_keyword(const char* str) {
    for (int i = 0; keywords[i] != NULL; i++) {
        if (strcmp(str, keywords[i]) == 0) {
            return 1; // It's a keyword
        }
    }
    return 0; // Not a keyword
}
%}

%%
# Rule to recognize identifiers
# An identifier starts with a letter or underscore, followed by letters, digits, or underscores
[A-Za-z_][A-Za-z0-9_]* {
    // Check if the identifier is a keyword
    if (is_keyword(yytext)) {
        printf("Keyword: %s\n", yytext);
    } else {
        printf("Identifier: %s\n", yytext);
    }
}

# Any other pattern (catch-all rule)
. {
    // Ignore unrecognized input
}

%%

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    
    FILE *file = fopen(argv[1], "r");
    if (!file) {
        perror("Error opening file");
        return 1;
    }
    
    yyin = file; // Set input file stream
    
    // Process the input file using yylex
    yylex();
    
    // Close the file
    fclose(file);
    
    return 0;
}

##############################################################################

Recognize all comments:

%{
#include <stdio.h>

int nested_comment_level = 0; // Track the nesting level of comments

%}

# Define macros for readability
%option noinput

%%
# Rule to recognize comments starting with "#"
^#[^\n]* {
    printf("Comment (starting with #): %s\n", yytext);
}

# Rule to recognize comments enclosed in "#" and "#"
"#"[^\n]*"#" {
    printf("Comment (enclosed in # and #): %s\n", yytext);
}

# Rule to recognize comments starting with "//"
^//[^\n]* {
    printf("Comment (starting with //): %s\n", yytext);
}

# Rule to recognize comments enclosed in "/*" and "*/"
# The rule handles nested comments by adjusting the nesting level

# Start of a comment block
"/*" {
    nested_comment_level++;
    
    // Print the comment
    printf("Comment (starting with /*): %s", yytext);
    
    BEGIN(COMMENT); // Enter COMMENT state
}

# In COMMENT state
<COMMENT>{
    # End of a comment block
    "*/" {
        nested_comment_level--;
        
        // Print the comment
        printf("%s", yytext);
        
        if (nested_comment_level == 0) {
            BEGIN(INITIAL); // Return to INITIAL state if nesting level is zero
        }
    }
    
    # Start of a nested comment block
    "/*" {
        nested_comment_level++;
        
        // Print the comment
        printf("%s", yytext);
    }
    
    # Anything else in the comment block
    .|\n {
        // Print the comment
        printf("%s", yytext);
    }
}
%%

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    
    FILE *file = fopen(argv[1], "r");
    if (!file) {
        perror("Error opening file");
        return 1;
    }
    
    yyin = file; // Set input file stream
    
    // Process the input file using yylex
    yylex();
    
    // Close the file
    fclose(file);
    
    return 0;
}


###########################################################################################
 recognizes strings enclosed in double quotes and characters enclosed in single quotes, and prints them:

%{
#include <stdio.h>
%}

%%
# Rule to recognize strings enclosed in double quotes
# Matches text starting with a double quote, followed by any sequence of characters except for a double quote,
# and ending with a double quote. It also handles escaped double quotes within the string.
\"([^\"\\]|\\.)*\" {
    printf("String: %s\n", yytext);
}

# Rule to recognize characters enclosed in single quotes
# Matches text starting with a single quote, followed by a single character (or escaped character),
# and ending with a single quote.
'([^'\\]|\\.)' {
    printf("Character: %s\n", yytext);
}

# Any other pattern (catch-all rule)
. ;

%%

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    
    FILE *file = fopen(argv[1], "r");
    if (!file) {
        perror("Error opening file");
        return 1;
    }
    
    yyin = file; // Set input file stream
    
    // Process the input file using yylex
    yylex();
    
    // Close the file
    fclose(file);
    
    return 0;
}

###############################################################################

reads an input file and replaces every letter with the letter that comes three positions after it in alphabetical order, wrapping around at Z or z:

%{
#include <stdio.h>

// Function to calculate the shifted character
char shift_char(char ch) {
    if (ch >= 'A' && ch <= 'Z') {
        // Shift uppercase letters
        return 'A' + (ch - 'A' + 3) % 26;
    } else if (ch >= 'a' && ch <= 'z') {
        // Shift lowercase letters
        return 'a' + (ch - 'a' + 3) % 26;
    }
    return ch; // Return the character unchanged if not a letter
}
%}

%%
# Rule to recognize letters and replace them with the letter 3 positions after it
[A-Za-z] {
    // Shift the recognized character and print it
    printf("%c", shift_char(yytext[0]));
}

# Any other pattern (catch-all rule)
. {
    // Print unrecognized input as is
    printf("%s", yytext);
}

%%

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    
    FILE *file = fopen(argv[1], "r");
    if (!file) {
        perror("Error opening file");
        return 1;
    }
    
    yyin = file; // Set input file stream
    
    // Process the input file using yylex
    yylex();
    
    // Close the file
    fclose(file);
    
    return 0;
}

#############################################################################
 reads an input file and finds the smallest and longest words from the given text:


%{
#include <stdio.h>
#include <string.h>

char smallest_word[256];
char longest_word[256];
int smallest_length = INT_MAX;
int longest_length = 0;

// Function to process each word
void process_word(char *word) {
    int length = strlen(word);
    
    // Update the smallest word and length if the current word is smaller
    if (length < smallest_length) {
        smallest_length = length;
        strcpy(smallest_word, word);
    }
    
    // Update the longest word and length if the current word is longer
    if (length > longest_length) {
        longest_length = length;
        strcpy(longest_word, word);
    }
}

%}

%%
# Rule to recognize words as sequences of alphabetic characters
[A-Za-z]+ {
    // Process the recognized word
    process_word(yytext);
}

# Any other pattern (catch-all rule)
. ;

%%

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    
    FILE *file = fopen(argv[1], "r");
    if (!file) {
        perror("Error opening file");
        return 1;
    }
    
    yyin = file; // Set input file stream
    
    // Process the input file using yylex
    yylex();
    
    // Close the file
    fclose(file);
    
    // Print the results
    printf("Smallest word: %s (Length: %d)\n", smallest_word, smallest_length);
    printf("Longest word: %s (Length: %d)\n", longest_word, longest_length);
    
    return 0;
}


###############################################################################

This lex specification program is from generate a
program which simulates cat command to create files.
While giving input first "start" word has from be typed
and at the end "end" word has from be typed.
%{
%}
%%
"start" ;
"end" exit(­1);
. ECHO ;
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyout=fopen(argv[1],"w");
yylex();
printf("\n");
return 0;
}

Let the above specification file be “ex14.lex”. Run the following commands.
lex ex14.lex
gcc –o ex14 lex.yy.c –lfl
./ex14 filename

#########################################################################################

This lex specification program is to eliminate multiple
spaces and tabs and replace with a single space and
remove empty lines. Here, yytext is processed in our
actions.

%{
#include<stdlib.h>
#include<stdio.h>

int emptyline=0;
%}
SPACES [ \t]
eol \n
%%
{SPACES}+ {printf(" "); }
\n|. {

char c=yytext[0];
if(!isspace(c)) {
emptyline=1;
putchar(c);
}
if(c=='\n')
{
if(emptyline)putchar(c);
emptyline=0;
}
}
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
printf("\n");
return 0;
}

################################################################################

This lex specification program is to display only C
comments in a given C file. Here, whenever “/*” pattern
is encountered in the input, we have written code to
process next characters in the input till we encounter
the pattern “*/”. Whenever, “/*” pattern is encountered
the C code will be executed. Here, we have used lex
specific function (see Table )input() is used to read

characters from the lex input buffer and print them till
it encounters “*/” pattern.

%{
%}
%%
"/*" {char c;
int done=0;
ECHO;
do
{
while((c=input())!='*') putchar(c);
putchar(c);
while((c=input())=='*') putchar(c);
putchar(c);
if(c=='/') done=1;
} while(!done);
}
. ;
\n ;
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
printf("\n");
return 0;
}

################################################################################

This lex specification file is to display a file’s
content by replacing “:” with \t

%{
%}
%%
":" {printf("\t");}
\n|. ECHO ;
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
printf("\n");
return 0;
}

Let the above specification file be “ex17.lex”. Run the following commands.
lex ex17.lex
gcc –o ex17 lex.yy.c –lfl
./ex17 /etc/passwd

##############################################################################

For example, to count all instance of she and he, including the instances of he that are included in
she, use the following action:
%{
int s=0;
%}

%%
she {s++; REJECT;}
he {s++}
\n |
. ;
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
printf("No of ocurrence of he including in he in she=%
d\n",s);
return 0;
}

###################################################################################

The following lex specification file is used to generate a C program which counts number
of words in a file other than the word “incl”.
%{
int nw=0;
%}
%%
incl nw­­; REJECT;
[^ \t\n]+ nw++;
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
printf("No of words other than the word incl=%d\n",nw);
return 0;
}

########################################################################################

The following lex specification program generates a C program which takes a string
“abcd” and prints the following output. From terminate the program enter ^d.
abcd
abc
ab
a
%{
%}
%%
a|ab|abc|abcd printf("%s\n",yytext);REJECT
.|\n
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
return 0;
}

########################################################################################

The following lex specification file generates a C program which extract http, ftp or
telnet tags from the given file.
%{
%}
%%
(ftp|http|telnet):\/\/[^ \n<>"]*
.|\n
%%
main(int argc, char*argv[])

{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
return 0;
}

#########################################################################################

The following lex program generates a C program which takes standard input as output
of Unix date and gives either of the following messages
Good Morning
Good Afternoon
Good Evening
%{
%}
%%
Morning [ ](00|01|02|03|04|05|06|07|08|09|10|11)[:]
Afternoon [ ](12|13|14|15|16|17)[:]
Evening [ ](18|19|20|21|22|23)[:]
%%
{Morning} printf("Good Morning ");
{Afternoon} printf("Good Afternoon ");
{Evening} printf("Good Evening ");
. ;

If we assume that executable file name of the generated C program is “greet” then we
can run the following command from see the output.
date | greet

BEGIN followed by the name of a start condition places the scanner in the corresponding start
condition .

####################################################################################

The following lex specification file is used to generate
scanner program for a toy Pascal­like language which
extracts integers type of numbers, float type of
numbers, key words such as if, procedure etc.

%{
#include <math.h>
#include<stdlib.h>
%}
DIGIT [0­9]
ID [a­z][a­z0­9]*
%%

{DIGIT}+ {
printf( "An integer: %s (%d)\n", yytext,
atoi( yytext ) );
}
{DIGIT}+"."{DIGIT}* {
printf( "A float: %s (%g)\n", yytext,
atof( yytext ) );
}
if|then|begin|end|procedure|function {
printf( "A keyword: %s\n", yytext );
}
{ID} printf( "An identifier: %s\n", yytext );
"+"|"­"|"*"|"/" printf( "An operator: %s\n",
yytext );
"{"[\^{$\;$}}\n]*"}" /* eat up one­line comments */
[ \t\n]+ /* eat up whitespace */
. printf( "Unrecognized character: %s\n",
yytext );
%%
main( argc, argv )
int argc;
char **argv;
{
++argv, ­­argc; /* skip over program name */
if ( argc > 0 )
yyin = fopen( argv[0], "r" );
else
yyin = stdin;
yylex();

}

################################################################################

A lex input file that changes all numbers to hexadecimal in input file while ignoring all others.
%{
#include<stdlib.h>
%}
digit [0­9]
number {digit}+
%%
{number} { int n = atoi(yytext); printf("%x", n); }
. {;}
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
yyin=fopen(argv[1],"r");
yylex();
return 0;
}

##################################################################################

The lex specification file generates a C program which
counts number of word with length 1 character, 2
characters vice versa in the given input.

%{
int leng[100];
%}
%%
[a­z]+ leng[yyleng]++;
.|\n ;
%%
main(int argc, char*argv[])
{

extern FILE *yyin;
int i;
for(i=1;i<100;i++) leng[i]=0;
yyin=fopen(argv[1],"r");
yylex();
printf("Word Length Frequency\n");
for(i=1;i<100;i++)
printf("%11d %10d\n",i,leng[i]);
return 0;
}

##################################################################################

This lex specification file is used to generate a C program which counts how many times
a given alphabet is next to another alphabet in the given input (This frequency table is
called as digram in natural language processing terminology and also in algorithms.

%{
#include<stdlib.h>
int F[26][26];
%}
%%
[A­Za­z][A­Za­z] {
F[toupper(yytext[0])­65][toupper(yytext[1])­65]
++;REJECT;
}
.|\n ;
%%
main(int argc, char*argv[])
{
extern FILE *yyin;
int i,j;
for(i=0;i<26;i++)
for(j=0;j<26;j++)F[i][j]=0;
yyin=fopen(argv[1],"r");
yylex();
for(i=0;i<26;i++){
for(j=0;j<26;j++) printf("%d", F[i][j]);
printf("\n");
}
return 0;
}

If we give the following input to the program which is
created compiling lex.yy.c file generated from the above
lex specification file.
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz

##################################################################################




















































